{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","MapContainer","TileLayer","url","attribution","Table","options","legend","display","elements","points","maintainAspectRatio","tooltips","mode","intersect","callback","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04bd519a.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./InfoBox.css\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox__total\" color=\"initial\">{total} Total</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#cc1034\",\r\n        rgb: \"rgb(204, 16, 52)\",\r\n        half_op: \"rgba(204, 16, 52, 0.5)\",\r\n        multiplier: 200,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        rgb: \"rgb(125, 215, 29)\",\r\n        half_op: \"rgba(125, 215, 29, 0.5)\",\r\n        multiplier: 300,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        rgb: \"rgb(251, 68, 67)\",\r\n        half_op: \"rgba(251, 68, 67, 0.5)\",\r\n        multiplier: 500,\r\n    },\r\n};\r\n\r\n// Sorting the countries by number of cases\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];  //copy the data to an array\r\n\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    });\r\n    return sortedData\r\n    //return sortedData.sort((a,b) => (a.cases > b.cases ? -1 : 1))\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\nstat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\"; \r\n\r\n//DRAW circles on the map with interactive tooltips\r\nexport const showDataOnMap = (data, casesType = 'cases') => (\r\n    data.map((country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div className=\"info-flag\" style={{ backgroundImage: `url(${country.countryInfo.flag})` }}></div>\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n);\r\n\r\n","import React from 'react'\r\nimport { Map as LeafletMap, MapContainer, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <MapContainer\r\n                center={center}\r\n                zoom={zoom}\r\n            >\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {/* {Loop through countries and draw circles on the map} */}\r\n                {showDataOnMap(countries, casesType)}\r\n            </MapContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({ country, cases }) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from 'react';\r\n//npm i react-chartjs-2\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        points: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callback: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    }, \r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0.0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}\r\nconst buildChartData = (data, casesType) => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            const newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n    const [data, setData] = useState({});\r\n\r\n    //https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=30')\r\n                .then((response) => {\r\n                    return response.json();\r\n                })\r\n                .then((data) => {\r\n                    //clever stuff here...\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                });\r\n        }\r\n\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (  //check if data exists\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [{\r\n                            backgroundColor: 'rgba(204, 16, 51, 0.5)',\r\n                            borderColor: '#CC1034',\r\n                            data: data,\r\n                        },\r\n                        ],\r\n                    }}\r\n                />\r\n            )}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { MenuItem, FormControl, Select, Card, CardContent } from '@material-ui/core'\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { prettyPrintStat, sortData } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  //STATE = How to write a variable in REACT <<\n\n  //USEEFFECT = Runs a piece of code based on a given condition\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    //The code inside here will run once when the component loads and not again\n    //async -> send a request, wait for it, do something with info\n\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }\n          ));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n\n  }, []); //[]-> here is the condition\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;  //shows the selected value in the dropdown\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n\n        //All of the data from the country response\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n    //https://disease.sh/v3/covid-19/all -> WORLDWIDE\n    //https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\n  };\n\n  console.log('Country info >>>', countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              {/* {Loop through all the countiest\n               and show drop down list of the options} */}\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {\n                countries.map(country => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType('cases')}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType('recovered')}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType('deaths')}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        {/* {Map} */}\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          {/* Table => We have fetched all of the county data in the useEffect */}\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          {/* {Graph} */}\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}